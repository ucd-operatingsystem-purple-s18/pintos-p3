+---------------------------+
		    
| CS 140                    |
		    
| PROJECT 3: VIRTUAL MEMORY	|
		    
|	DESIGN DOCUMENT           |
		    
+---------------------------+

---- 

GROUP ----


>> Fill in the names and email addresses of your group members.


Johnathan Becker <johnathan.becker@ucdenver.edu>
Nathan Terry <nathan.terry@ucdenver.edu>


NOTE: "What we were trying to do..."


-->Answers are based on groups intentions, as we did not pass quite a few tests.





---- PRELIMINARIES ----




>> If you have any preliminary comments on your submission, notes for the

>> TAs, or extra credit, please give them here.




>> Please cite any offline or online sources you consulted while

>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			

Virginia Tech Notes:
http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project3Session.pdf

USC Notes:
http://bits.usc.edu/cs350/assignments/project3.pdf

Public Repository (Visited by Nate Terry)
https://github.com/ryantimwilson/Pintos-Project-3


PAGE TABLE MANAGEMENT
			
=====================

			


---- DATA STRUCTURES ----



>> A1: Copy here the declaration of each new or changed `struct' or

>> `struct' member, global or static variable, `typedef', or

>> enumeration.  Identify the purpose of each in 25 words or less.






---- ALGORITHMS ----




>> A2: In a few paragraphs, describe your code for accessing the data

>> stored in the SPT about a given page.



What we were trying to do....when accessing a page which is going to have a user virtual addr, and then check how it is mapped, or if it is mapped to another page directory. If we find that it is mapped like we intended, then the frame is supposed to be returned. If we can't map to a page, When we search through and don't find what we are looking for then we, then we access our supplemental page table and with the address that we have. Our goal is to have it loaded into a frame of course, and the primary check is to see if it already has been loaded or not, so we will know if the corresponding frame entry in the frame table. 

>> A3: How does your code coordinate accessed and dirty bits between

>> kernel and user virtual addresses that alias a single frame, or

>> alternatively how do you avoid the issue?
Our intention was to remain as simple and consistent as possible and access the user data through the stated virtual address, clearly though we did not employ it correctly.



---- SYNCHRONIZATION ----




>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?



USER DEFINITION::A race condition occurs when two or more threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are "racing" to access/change the data.
When planning how to utilize the frame table best we decided a global 
frame table lock would be necesarry. We did end up adding one of these 
into our code but did not get far enough into the code to need it.




---- RATIONALE ----




>> A5: Why did you choose the data structure(s) that you did for

>> representing virtual-to-physical mappings?


		       
We ended up using a list for our frame table, and this worked out well 
because it was sorted by
the addr, which means since virtual to physical has a 1-1 mapping we 
would always have a sorted
list of addresses that would match up.


PAGING TO AND FROM DISK
		       
=======================

	

		   

---- DATA STRUCTURES ----




>> B1: Copy here the declaration of each new or changed `struct' or

>> `struct' member, global or static variable, `typedef', or

>> enumeration.  Identify the purpose of each in 25 words or less.




---- ALGORITHMS ----




>> B2: When a frame is required but none is free, some frame must be

>> evicted.  Describe your code for choosing a frame to evict.



We Unfortunately did not get time to write our eviction policy. Although 
what I had written out for it was to first search through
finding any edited pages(dirty pages)  and first evicting those pages on 
a FIFO basis. I believe this would have been an efficient
and fair eviction policy and if no dirty pages were available you would 
PANIC the kernel.


>> B3: When a process P obtains a frame that was previously used by a

>> process Q, how do you adjust the page table (and any other data

>> structures) to reflect the frame Q no longer has?



OUr frame table had a
struct frame_entry
{
         ....
       struct thread* cur_thread;
           ...
};
member that would let us know who owned the frame. When a new process takes
  over this ownership would follow.


>> B4: Explain your heuristic for deciding whether a page fault for an

>> invalid virtual address should cause the stack to be extended into

>> the page that faulted.



We unfortunately did not get to grow the stack but my understanding and 
how I would have implemented it would be to first decide if the virtual address was in kernel space or below kernel space. If below and we have reached the limit
for our current stack size then we would extend the stack up to a 
maximum of x number of pages. IF we exceed a predefined
limit for pages we would panic the kernel.


---- SYNCHRONIZATION ----




>> B5: Explain the basics of your VM synchronization design.  In

>> particular, explain how it prevents deadlock.  (Refer to the

>> textbook for an explanation of the necessary conditions for

>> deadlock.)



We were not completely successful, but were trying to use the supp-page table with is based on processes while the swap/frame tables are global. We wanted to prevent table confusion and let them be able to synchronize, and needed to lock any access to a supplemental page table entry. These locks were intended to be acquired and released appropriately to stop further conflict/confusion in our system. 

>> B6: A page fault in process P can cause another process Q's frame

>> to be evicted.  How do you ensure that Q cannot access or modify

>> the page during the eviction process?  How do you avoid a race

>> between P evicting Q's frame and Q faulting the page back in?


As mentioned above, we had intended to protect the supplemental page table entries, and not allow any access if our lock conditions were breached. For an eviction, the first thing is that a lock should be acquired so that Q will page fault and then have to go to the supplemental page table. 



>> B7: Suppose a page fault in process P causes a page to be read from

>> the file system or swap.  How do you ensure that a second process Q

>> cannot interfere by e.g. attempting to evict the frame while it is

>> still being read in?



What would have been intended, is to have a attribute per a frame entry which could be stated as true or false, so that when the system will try to access it for a swap or something else, then it can stop it from being evicted etc. 

>> B8: Explain how you handle access to paged-out pages that occur

>> during system calls.  Do you use page faults to bring in pages (as

>> in user programs), or do you have a mechanism for "locking" frames

>> into physical memory, or do you use some other design?  How do you

>> gracefully handle attempted accesses to invalid virtual addresses?
As intended, we would have check the pages to see their status, as in if it was paged in/out. If it was out then we could set our boolean frame value so we would know if it should be evicted or not. It should be easy to check for invalid addresses, and reject a bad address in the same process.



---- RATIONALE ----




>> B9: A single lock for the whole VM system would make

>> synchronization easy, but limit parallelism.  On the other hand,

>> using many locks complicates synchronization and raises the

>> possibility for deadlock but allows for high parallelism.  Explain

>> where your design falls along this continuum and why you chose to

>> design it this way.


			
Where our design INTENDED to fall, was to definitely avoid a system lock so that we wouldnt limit ourselves too much. We intended separate locks per resources to help us avoid the deadlocks. We did not get far enough to verify our intentions. 

MEMORY MAPPED FILES
			 
===================

			 


---- DATA STRUCTURES ----



>> C1: Copy here the declaration of each new or changed `struct' or

>> `struct' member, global or static variable, `typedef', or

>> enumeration.  Identify the purpose of each in 25 words or less.
We unfortunately did not get this far and were unable to complete this 
section.



---- ALGORITHMS ----



>> C2: Describe how memory mapped files integrate into your virtual

>> memory subsystem.  Explain how the page fault and eviction

>> processes differ between swap pages and other pages.



We unfortunately did not get this far and were unable to complete this 
section.
We unfortunately did not get this far and were unable to complete this 
section.

>> C3: Explain how you determine whether a new file mapping overlaps

>> any existing segment.



We unfortunately did not get this far and were unable to complete this 
section.

---- RATIONALE ----




>> C4: Mappings created with "mmap" have similar semantics to those of

>> data demand-paged from executables, except that "mmap" mappings are

>> written back to their original files, not to swap.  This implies

>> that much of their implementation can be shared.  Explain why your

>> implementation either does or does not share much of the code for

>> the two situations.


			   
We unfortunately did not get this far and were unable to complete this 
section.


SURVEY QUESTIONS
			   ================

			   
Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?


>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?


>> Any other comments?
